import java.util.Random;

/**
 * –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–∫–∞–∑–∞, –¥–µ–π—Å—Ç–≤–∏—è –ò–ò <br>
 *    - füîí‚ì¢{@link Coms#AI} –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π –ò–ò <br>
 *    - üîí‚ì¢{@link Coms#n} –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Ç–æ–≤ —É –ò–ò <br>
 *        ///// <br>
 *    - ‚ì¢{@link Coms#go(String)} —Ä–∞—Å—á—ë—Ç –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–∞ <br>
 *    - üîí‚ì¢{@link Coms#ai()} —Ö–æ–¥ –ò–ò <br>
 */
class Coms {
    final private static byte[] AI = {0, 0, 0, 0, 2, 2, 2, 1, 1, 3, 4};
    private static byte n = 3;

    static void go(String s) {
        System.out.println("---------------------------------------------------------------------------");
        switch (s) {
            case "q":
                Start.q = true;
                System.out.println("–£–¥–∞—á–Ω–æ–π –ø–µ–Ω—Å–∏–∏, –ö–æ–º–∞–Ω–¥–∏—Ä!\n");
                return;
            case "p":
                Start.b1.pm++;
                System.out.println("–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ—â–Ω–æ—Å—Ç–∏ —É–≤–µ–ª–∏—á–µ–Ω—ã, –ö–æ–º–∞–Ω–¥–∏—Ä!\n");
                break;
            case "o":
                Start.b1.o += Start.b1.pm * 4;
                System.out.println("–û–±–æ—Ä–æ–Ω–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ " + (Start.b1.pm * 4) + " –µ–¥–µ–Ω–∏—Ü, –ö–æ–º–∞–Ω–¥–∏—Ä!\n");
                break;
            case "a":
                Start.b1.a = (long) Math.pow(2, Start.b1.pm - 1);
                System.out.println("–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–∑ " + ((long) Math.pow(2, Start.b1.pm - 1))
                        + " –µ–¥–µ–Ω–∏—Ü –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å –≤ –∞—Ç–∞–∫—É, –ö–æ–º–∞–Ω–¥–∏—Ä!\n");
                break;
            case "c":
                Start.b1.cu += Start.b1.pm * 2;
                System.out.println("–¶–µ–Ω—Ç—Ä –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–∫—Ä–µ–ø–ª—ë–Ω –Ω–∞ " + (Start.b1.pm * 2)
                        + " –µ–¥–µ–Ω–∏—Ü, –ö–æ–º–∞–Ω–¥–∏—Ä!\n");
                break;
            default:
                System.out.println("–ö–æ–º–∞–Ω–¥–∏—Ä, —É –Ω–∞—Å –ø–æ–º–µ—Ö–∏ –Ω–∞ –ª–∏–Ω–∏–∏! " +
                        "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫–∞–∑.\n");
                return;
        }

        // attack
        if ((AI[ai()] == 2) || (s.equals("a"))) Att.go();

        //win?
        if (Start.b1.cu < 1) {
            System.out.println("–ù–∞—à–∞ –ë–∞–∑–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞, –ö–æ–º–∞–Ω–¥–∏—Ä! ...–Ω–æ –º—ã –∏–∑–≤–ª–µ–∫–ª–∏ —É—Ä–æ–∫, " +
                    "–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–±–µ–¥–∏–º!\n");
            System.out.println("(" + Start.b2.cu + "/" + Start.b2.pm + "/" + Start.b2.o + ")");
            Start.q = true;
        } else if (Start.b2.cu < 1) {
            System.out.println("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –ö–æ–º–∞–Ω–¥–∏—Ä! –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç –£–Ω–∏—á—Ç–æ–∂–µ–Ω!!!");
            Start.q = true;
        }
    }

    private static int ai() {
        int r = new Random().nextInt(AI.length);

        switch (AI[r]) {
            case 0:
                Start.b2.pm++;
                break;
            case 1:
                Start.b2.o += Start.b2.pm * 4;
                break;
            case 2:
                Start.b2.a = (long) Math.pow(2, Start.b2.pm - 1);
                break;
            case 3:
                if (n > 0) {
                    n--;
                    Start.b2.pm += 3;
                    System.out.println("–í–Ω–∏–º–∞–Ω–∏–µ, –∑–∞–º–µ—á–µ–Ω –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç! " +
                            "–í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —á–∏—Ç—ã!\n");
                } else Start.b2.o += Start.b2.pm * 4;
                break;
            case 4:
                Start.b2.cu += Start.b1.pm * 2;
                break;
        }
        return r;
    }
}
